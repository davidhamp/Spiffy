<?php
/**
 * SPF/Core/ReflectionPool.php
 *
 * @author  David Hamp <david.hamp@gmail.com>
 * @license https://github.com/davidhamp/Spiffy/blob/master/LICENSE.md
 * @version 1.0.0
 */

namespace SPF\Core;

use SPF\Exceptions\ReflectionPoolException;
use \reflectionClass;

/**
 * PHP ReflectionClass storage.
 *
 * Static class which stores PHP ReflectionClass instances generated by SPF
 *
 * @see SPF\Annotations\Engine
 * @see SPF\Dependency\DependencyManager
 */
class ReflectionPool
{
    static protected $pool = array();

    /**
     * Fetches an instance of the requested ReflectionClass.
     *
     * The {@link SPF\Annotations\Engine} as well as {@link SPF\Dependency\DependencyManager} require PHP reflection
     * in order to make decisions based on the structure SPF classes or phpDoc annotations.  This is a centralized,
     * static resource for caching these PHP reflectionClass instances.  If the className doesn't exist in the
     * pool already, it will create a new instance and store that in the pool before returning it.  If the className
     * doesn't exist, it will throw an {@link SPF\Exceptions\ReflectionPoolException} Exception.
     *
     * @param string $className The fully qualified className
     *
     * @throws SPF\Exceptions\ReflectionPoolException Throws a ReflectionPoolException if the className doesn't exist.
     *
     * @return reflectionClass Instance of a reflectionClass corresponding to the className.
     */
    static public function get($className)
    {
        if (!array_key_exists($className, self::$pool)) {
            if (class_exists($className)) {
                self::$pool[$className] = new reflectionClass($className);
            } else {
                throw new ReflectionPoolException("Requested className " . $classname . " doesn't exist");
            }
        }

        return self::$pool[$className];
    }
}